'''Assessment Practice'''
'''--------------------------------------------------------------------------------------------------------------------------------------'''

'''Engish or French? FRENCH:D'''

# def lang(x):  
#     s = 0
#     t = 0
#     for char in x:
#         if char== "s" or char =="S":
#             s += 1
#         elif char == "t" or char == "T": 
#             t += 1

#     if s> t:
#         print ("English")
#     else:
#         print("French")

# lang("Silver, why are you so sad?")
# # lang("Lorsque j'avais six ans j'ai vu, une fois,")

'''-------------------------------------------------------------------------------------------------------------------------------'''

""" Parking thingy that I hate making. D: """
'''And this one isn't finished.'''

# def parking_spacesAnyDay(n, x, y):
#     y_Car_OccupiedSpace = 0
#     y_Empty_notOccupied_Space = 0
#     for car in x:
#         if car == "C":
#             y_Car_OccupiedSpace += 1
#         elif car == ".":
#             y_Empty_notOccupied_Space += 1
    




#     t_Car_OccupiedSpace = 0
#     t_Empty_notOccupied_Space = 0
#     for car in y:
#         if car == "C":
#             t_Car_OccupiedSpace += 1
#         elif car == ".":
#             t_Empty_notOccupied_Space += 1



#     print(y_Car_OccupiedSpace, y_Empty_notOccupied_Space)
#     print(t_Car_OccupiedSpace, t_Empty_notOccupied_Space)

#     for i in range(n):
#         if y[i] == "C" and x[i] == "C":
#             occupied += 1
#     return(occupied)



# print(parking_spacesAnyDay(5, "CCC..", "C.C.C)."))






'''-----------------------------------------------------------------------------------------------------------------------------------------------------------------'''

""" BETTER PARKING THINGY """






# def spaces(n,y,t):
#     occupied=0
#     for i in range(n):
#         if y[i] == "C" and t[i] == "C":
#             occupied += 1
#     return(occupied)

# print(spaces(5, "CCC..", ".C.C."))











'''-----------------------------------------------------------------------------------------------------------------------------------------------------'''


# def honi(x):
#     honi = 0
#     for i in range(honi):
#         if x[i]=="H" == True:
#             if x[i]=="O" == True:
#                 if x[i]=="N" == True:
#                     if x[i]== "I" == True:
#                         honi+=1
                        


# print(honi("HHHHOOOONNNNIIII"))



'''------------------------------------------------------------------------------------------------------------------------------------------------------------'''

# name="A n d y"
# print(len(name))
# for letter in name:
#     print(letter)

def honi(x):
    honi_blockCounter=0
    honi = 0

    for i in range(x):
        len(honi)
        if x[i]=="H":
            honi+=1
        if x[i]=="O":
            honi+=1
        if x[i]=="N":
            honi+=1
        if x[i]=="I":
            honi=0
        if honi == 0: honi_blockCounter+=1
    if honi_blockCounter >= 1:
        print(honi("HHHHOOOONNNNIIII"))




def honi_counter(maybe_honiSequence):
    honi = 0
    honi_blockCounter = 0

    for char in maybe_honiSequence:
        if char == "H":
            honi += 1
        elif char == "O":
            honi += 1
        elif char == "N":
            honi += 1
        elif char == "I":
            honi = 0
        
        if honi == 0:
            honi_blockCounter += 1

    print("Number of honi blocks:", honi_blockCounter)

honi_counter("HHHHOOOONNNNIIII")




# def MC (n, s, a):
#     for i in range(n):
#         if s[i] == a[i]:
#             correct+=1 


# def pass (x):
#     lower = 0
#     upper = 0
#     digits = 0
#     if len(x)>8 and len(x)<12
#         for char in x:
#             if char.islower(): 
                


# def elder(o, n, duels):
#     owner = o
#     owners = 1
#     for i in duels:
#         if i[2] == owner:
#             owner = i[0]
#             owners = owners + 1

